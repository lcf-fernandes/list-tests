{"1741638157640":{"actionType":"saveAll","createdAt":"1741638157640","actionID":"1741638157640","userID":"#TEMP","path":"system.capsules.a24c4eed-ad5a-42ff-b72b-c96d2e8211bc.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"","newValue":"// ---------- import Packs\nimport React from 'react';\nimport { Pressable, TextInput, ViewStyle } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, pathSel } from '../project';\n// import { SvgView1 } from './SvgView1';\nimport { useData } from '../../..';\n\nconst SvgView1 = () => <></>;\n\ntype Tprops = {\n  pass: {\n    propsArray: any;\n    stylesArray: any;\n    funcsArray: any;\n    args: any;\n  };\n};\n\n// IptTxt2 - Entrada de Texto (fromDB_var)\nexport const IptTxt2 = (props: Tprops) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, args } = props.pass;\n\n  const getTxt = async (val: string) => {\n    for (const currFunc of funcsArray) await currFunc(val, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n\n  // ------- set User Props\n  let userElProps: any = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      console.log('IS A FUNCTION !!!!!!!!!!');\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      console.log('NOT FUNCTION');\n      console.log({ object });\n\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\n// ---------- IptTxt Masks\n\ntype Tprops2 = {\n  pass: {\n    propsArray: any;\n    stylesArray: any;\n    funcsArray: any;\n    editPath: string[];\n    ipt5?: string[];\n    args: any;\n  };\n};\n\nexport const IptTxtMaskPhone = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, editPath, args } = props.pass;\n  //   console.log({ propsArray });\n\n  const getTxt = async (val: string) => {\n    // ---------- set Limit Chars\n    let limitChars = val;\n    if (limitChars?.length > 15) limitChars = limitChars?.substring(0, 15);\n\n    // ---------- set OnlyNumbers\n    const onlyNum = limitChars?.replace(/\\D/g, '') ?? {};\n    const arrChars = Object.values(onlyNum);\n    const numChars = arrChars.length;\n\n    // ---------- set Format Numbers\n    const idx = num => arrChars[num] ?? '';\n    const firstFour = idx(2) + idx(3) + idx(4) + idx(5) + idx(6);\n    const secFour = idx(7) + idx(8) + idx(9) + idx(10);\n    const condHifen = numChars > 7 ? '-' : '';\n    const condSpace = numChars > 2 ? ' ' : '';\n    const condPar1 = numChars > 0 ? '(' : '';\n    const condPar2 = numChars > 2 ? ')' : '';\n    const condDDD = condPar1 + idx(0) + idx(1) + condPar2;\n    const mask = condDDD + condSpace + firstFour + condHifen + secFour;\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n  const editData = useData(ct => pathSel(ct, editPath.join()));\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  //   console.log({ userElProps });\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: editData,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtMaskCPF = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, editPath, args } = props.pass;\n  //   console.log({ propsArray });\n\n  const getTxt = async (val: string) => {\n    let limitChars = val;\n    if (limitChars?.length > 19) limitChars = limitChars?.substring(0, 19);\n\n    // ---------- set OnlyNumbers\n    const onlyNum = limitChars?.replace(/\\D/g, '');\n    // console.log({ onlyNum });\n\n    // ---------- set Format Numbers\n    const mask = onlyNum\n      ?.replace(/\\D+/g, '')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1-$2')\n      .replace(/(-\\d{2})\\d+?$/, '$1');\n\n    // console.log({ mask });\n\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n  const editData = useData(ct => pathSel(ct, editPath.join()));\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  //   console.log({ userElProps });\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: editData,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtMaskCNPJ = (props: Tprops2) => {\n  console.log('CNPJ Mask');\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, editPath, args } = props.pass;\n  console.log({ propsArray });\n\n  const getTxt = async (val: string) => {\n    let limitChars = val;\n    if (limitChars?.length > 19) limitChars = limitChars?.substring(0, 19);\n\n    // ---------- set OnlyNumbers\n    const onlyNum = limitChars?.replace(/\\D/g, '');\n\n    // ---------- set Format Numbers\n    const mask = onlyNum\n      ?.replace(/\\D+/g, '')\n      .replace(/(\\d{2})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1/$2')\n      .replace(/(\\d{4})(\\d)/, '$1-$2')\n      .replace(/(-\\d{2})\\d+?$/, '$1');\n\n    // console.log({ mask });\n\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n  const editData = useData(ct => pathSel(ct, editPath.join()));\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  //   console.log({ userElProps });\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: editData,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtMaskRG = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, editPath, args } = props.pass;\n\n  const getTxt = async (val: string) => {\n    let limitChars = val;\n    if (limitChars?.length > 13) limitChars = limitChars?.substring(0, 13);\n    console.log({ limitChars });\n\n    // ---------- set OnlyNumbers\n    const onlyNum = limitChars.replace(/\\D/g, '');\n    console.log({ onlyNum });\n\n    // ---------- set Format Numbers\n    // 00.000.000-01\n    const mask = onlyNum\n      .replace(/\\D+/g, '')\n      .replace(/(\\d{2})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1-$2')\n      .replace(/(-\\d{2})\\d+?$/, '$1');\n\n    console.log({ mask });\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n  const editData = useData(ct => pathSel(ct, editPath.join()));\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  //   console.log({ userElProps });\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: editData,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtMaskCCard = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, args } = props.pass;\n  // let editData = useData(ct => pathSel(ct, editPath.join()));\n  const [sttCardNum, setCardNum] = React.useState('');\n\n  const getTxt = async (val: string) => {\n    let limitChars = val;\n    if (limitChars?.length > 19) limitChars = limitChars?.substring(0, 19);\n\n    // ---------- set OnlyNumbers\n    const onlyNum = limitChars?.replace(/\\D/g, '');\n\n    // ---------- set Format Numbers\n    // 5394.3161.7485.6180\n    const mask = onlyNum\n      ?.replace(/\\D+/g, '')\n      .replace(/(\\d{4})(\\d)/, '$1.$2')\n      .replace(/(\\d{4})(\\d)/, '$1.$2')\n      .replace(/(\\d{4})(\\d)/, '$1.$2')\n      .replace(/(\\d{4})(\\d)/, '$1.$2');\n\n    setCardNum(mask);\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: sttCardNum,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva apenas números sem pontuação',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtMaskCustomNumbers = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, ipt5, args } = props.pass;\n  const [sttNum, setNum] = React.useState('');\n\n  const getTxt = async (val: string) => {\n    let numberLimit = Number(ipt5.join());\n    let limitChars = val;\n    if (limitChars?.length > numberLimit)\n      limitChars = limitChars?.substring(0, numberLimit);\n\n    // ---------- set OnlyNumbers\n    const mask = limitChars?.replace(/\\D/g, '');\n    setNum(mask);\n    for (const currFunc of funcsArray) await currFunc(mask, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      //   console.log('IS A FUNCTION !!!!!!!!!!');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      //   console.log('NOT FUNCTION');\n      //   console.log({ object });\n      //   console.log({ newObj });\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  //   console.log({ userElProps });\n  const allProps = {\n    style: [stlsUser],\n    onChangeText: getTxt,\n    value: sttNum,\n    placeholderTextColor: '#ccc',\n    placeholder: 'Escreva...',\n\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n\nexport const IptTxtPassword = (props: Tprops2) => {\n  // ------- set IptTxt Inputs\n  const { propsArray, stylesArray, funcsArray, args } = props.pass;\n\n  // ---------- Watchers\n  const [sttText, setText] = React.useState('');\n  const [sttShowPass, setShowPass] = React.useState(true);\n\n  const btnToggle = () => setShowPass(!sttShowPass);\n  const getTxt = async (val: string) => {\n    setText(val);\n    for (const currFunc of funcsArray) await currFunc(val, args);\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n  const stlBtnEye: ViewStyle = {\n    width: 34,\n    height: 24,\n    position: 'absolute',\n    backgroundColor: 'white',\n    bottom: 2,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n\n  // ------- set User Props\n  let userElProps = {};\n\n  for (const object of propsArray) {\n    const isFnc = typeof object === 'function';\n    let newObj = {};\n    if (isFnc) {\n      newObj = object();\n      userElProps = { ...userElProps, ...newObj };\n    }\n\n    if (!isFnc) {\n      for (const keyProp in object) {\n        const valueProp = object[keyProp];\n        userElProps[keyProp] = valueProp;\n      }\n    }\n  }\n\n  const allProps = {\n    style: [stlsUser],\n    secureTextEntry: sttShowPass,\n    onChangeText: getTxt,\n    placeholderTextColor: '#C0C0C0',\n    value: sttText,\n\n    ...userElProps,\n  };\n\n  return (\n    <>\n      <TextInput {...allProps} />\n      <Pressable style={stlBtnEye} onPress={btnToggle}>\n        {sttShowPass ? <EyeOpen /> : <EyeClose />}\n      </Pressable>\n    </>\n  );\n};\n\nconst EyeOpen = () => (\n  <SvgView1\n    pass={{\n      componentSvg: (Svg: any, SvgObj: any) => {\n        const { Path } = SvgObj;\n        return () => (\n          <Svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={14}\n            height={14}\n            viewBox=\"0 0 20 16\"\n          >\n            <Path\n              fill=\"#444\"\n              fillRule=\"evenodd\"\n              d=\"M10 2C6.767 2 3.96 4.31 2.205 7.796a12.61 12.61 0 0 0-.1.204l.032.068.068.136C3.96 11.69 6.767 14 10 14c3.233 0 6.04-2.31 7.795-5.796l.068-.136.032-.068a1.847 1.847 0 0 0-.032-.068l-.068-.136C16.04 4.31 13.233 2 10 2ZM.418 6.896C2.358 3.044 5.72 0 10 0c4.28 0 7.642 3.044 9.581 6.896l.022.043c.091.18.21.412.262.7.042.227.042.495 0 .723-.053.287-.17.519-.262.7l-.022.042C17.641 12.956 14.281 16 10 16 5.72 16 2.358 12.956.418 9.104a15.392 15.392 0 0 0-.021-.043c-.092-.18-.21-.412-.262-.7a2.097 2.097 0 0 1 0-.723 2.523 2.523 0 0 1 .283-.742ZM10 6a2 2 0 1 0 0 4 2 2 0 0 0 0-4ZM6 8a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z\"\n              clipRule=\"evenodd\"\n            />\n          </Svg>\n        );\n      },\n      altura: '',\n      largura: '',\n      preenchimento: [''],\n      svgOriginal: '',\n      args: {},\n    }}\n  />\n);\n\nconst EyeClose = () => (\n  <SvgView1\n    pass={{\n      componentSvg: (Svg: any, SvgObj: any) => {\n        const { Path } = SvgObj;\n        return () => (\n          <Svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={14}\n            height={14}\n            viewBox=\"0 0 20 16\"\n          >\n            <Path\n              fill=\"#444\"\n              fillRule=\"evenodd\"\n              d=\"M1.614.21A1 1 0 0 0 .386 1.79l2.278 1.77c-.88.985-1.633 2.12-2.245 3.336l-.022.043c-.091.18-.21.412-.262.7a2.097 2.097 0 0 0 0 .723c.053.287.17.519.262.7l.022.042C2.359 12.956 5.719 16 10 16c2.231 0 4.213-.827 5.874-2.165l2.512 1.954a1 1 0 1 0 1.228-1.578l-18-14Zm12.627 12.355-1.798-1.398a4 4 0 0 1-6.115-4.756L4.245 4.79c-.778.849-1.466 1.864-2.04 3.005a12.547 12.547 0 0 0-.1.204l.032.068.068.136C3.96 11.69 6.767 14 10 14c1.531 0 2.967-.518 4.241-1.435ZM8.02 7.725a2 2 0 0 0 2.735 2.127L8.019 7.727Z\"\n              clipRule=\"evenodd\"\n            />\n            <Path\n              fill=\"#0F1729\"\n              d=\"M8.95 4.14 14 8.065V8a4 4 0 0 0-5.05-3.86Z\"\n            />\n            <Path\n              fill=\"#0F1729\"\n              d=\"M17.795 8.204a14.2 14.2 0 0 1-1.155 1.915l1.578 1.228c.51-.701.967-1.455 1.364-2.243l.021-.043c.092-.18.21-.412.262-.7a2.094 2.094 0 0 0 0-.723c-.052-.287-.17-.52-.262-.7l-.021-.042C17.642 3.044 14.28 0 10 0 8.285 0 6.717.489 5.33 1.323l1.729 1.345A6.889 6.889 0 0 1 10 2c3.233 0 6.04 2.31 7.795 5.796l.068.136.032.068a1.8 1.8 0 0 1-.032.068l-.068.136Z\"\n            />\n          </Svg>\n        );\n      },\n      altura: '',\n      largura: '',\n      preenchimento: [''],\n      svgOriginal: '',\n      args: {},\n    }}\n  />\n);"}}